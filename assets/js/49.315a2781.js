(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{519:function(s,t,a){"use strict";a.r(t);var e=a(19),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("p",[s._v("harbor镜像没有自动清理过期镜像的设置，所以通过api利用shell脚本实现，比较坑的是v2.0版本和1.9版本变得翻天覆地，浪费老子很多时间。")]),s._v(" "),a("h2",{attrs:{id:"清理主脚本-v1-9-4-版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清理主脚本-v1-9-4-版本"}},[s._v("#")]),s._v(" 清理主脚本 v1.9.4 版本")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##!/bin/bash")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('## 通过api查找到所有对应的镜像地址，这里有个"tags_count"就是镜像的tag数，通过tag数判断>5筛选出对应的镜像"repository_name"，刚开始一直在想通过管道连接的方式一条语句判断出来，结果确实没有想到好的方法判断出来，退而求其次选择了现在的方法，将获取到的值保存到文件中，根据自己的需要构造一个新的文件。')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("harbor_user")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("harbor_passwd")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("harbor_url")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("HARBOR_PATH")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("repo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("dev\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("date")]),s._v(" +"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%F %H:%M:%S'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(' clear start"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##获取所有tags_count")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -s -k -X GET "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_user}")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_passwd}")]),s._v("@"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_url}")]),s._v("/api/search?q="),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${repo}")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("tags_count"),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" -F "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),s._v("}'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" -F "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),s._v("}'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##获取所有repository_name")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("REPS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -s -k -X GET "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_user}")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_passwd}")]),s._v("@"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_url}")]),s._v("/api/search?q="),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${repo}")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("repository_name"),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" -F "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),s._v("}'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 接下来就是根据需求造文件，我这里想要的格式是 tags_count ,repository_name在同一行一一对应关联起来。")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##touch test_count.txt")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##touch test_server.txt")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("i")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$COUNT")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" test_count.txt\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("y")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$REPS")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$y")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" test_server.txt\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##合并俩个文件拼接出新的文件，新的文件count_and_server.txt里面存放的就是我们造好的数据。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("paste")]),s._v(" test_count.txt test_server.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" count_and_server.txt\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##删除不需要的文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf test_count.txt\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf test_server.txt\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf server.txt\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##循环读取每一行并判断，这里根据tab切割第一个值是tags_count，第二个值对应repository_name，判断大于5将服务读取到server.txt，这样server.txt里面就是我们所有需要清除的镜像")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("FILENAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("count_and_server.txt \n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILENAME")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" LINE\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("new_str")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" $LINE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cut")]),s._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v(" -f1"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("new_str1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" $LINE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cut")]),s._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v(" -f2"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$new_str")]),s._v(" -gt "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$new_str1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" server.txt\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" -i "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s@\\/@%2F@g'")]),s._v(" server.txt\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("SERVER_NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("server.txt\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$SERVER_NAME")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" LINE\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("              \n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 继续造文件，造一个时间和tag名称对应的文件，这里文件是偶数行是created时间。奇数行是tag名称")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("name_date")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -s -k -X GET "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_user}")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_passwd}")]),s._v("@"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_url}")]),s._v("/api/repositories/"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${LINE}")]),s._v('/tags"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("egrep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("created|name"),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" -F "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),s._v("}'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("date")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$name_date")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$date")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" date.txt\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 交换奇偶行")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'getline i{print i}1'")]),s._v(" date.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" tmp.txt\n\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"++++++++++++++++++++++++++++++++++"')]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##合并两行，将时间和tag名称放到一行一一对应")]),s._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'{if(NR%2!=0)ORS=" ";else ORS="'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("\"}1'")]),s._v(" tmp.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" new_date.txt\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 按照时间倒序进行排序")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" -r new_date.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" new1_date.txt\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf new_date.txt\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf date.txt\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf tmp.txt\n        \n        "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("NEW_DEL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("new1_date.txt\n        "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("del_tag")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" new1_date.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v(" -n +6 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" -F"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v("}'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 可以查看到所有满足删除需求的")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$del_tag")]),s._v("   \n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"==========================================="')]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##根据tag执行软删除")]),s._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##根据tag执行软删除")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("single_del_tag")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$del_tag")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" \n              "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -s -k -X DELETE "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_user}")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_passwd}")]),s._v("@"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_url}")]),s._v("/api/repositories/"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${LINE}")]),s._v("/tags/"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${single_del_tag}")]),s._v('"')]),s._v("    \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n   \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\ndocker-compose -f "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$HARBOR_PATH")]),s._v("/docker-compose.yml stop\ndocker run -it --name gc --rm --volumes-from registry vmware/registry:2.6.2-photon garbage-collect --dry-run /etc/registry/config.yml "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("/dev/null\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##最后启动harbor")]),s._v("\ndocker-compose -f "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$HARBOR_PATH")]),s._v("/docker-compose.yml start\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("date")]),s._v(" +"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%F %H:%M:%S'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(' clear finish"')]),s._v("\n\n")])])]),a("h2",{attrs:{id:"清理主脚本-v2-0-版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#清理主脚本-v2-0-版本"}},[s._v("#")]),s._v(" 清理主脚本 v2.0 版本")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##!/bin/bash")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('## 通过api查找到所有对应的镜像地址，这里有个"tags_count"就是镜像的tag数，通过tag数判断>5筛选出对应的镜像"repository_name"，刚开始一直在想通过管道连接的方式一条语句判断出来，结果确实没有想到好的方法判断出来，退而求其次选择了现在的方法，将获取到的值保存到文件中，根据自己的需要构造一个新的文件。')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("harbor_user")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("harbor_passwd")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("harbor_url")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("HARBOR_PATH")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("repo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("pro\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("version")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("v2.0\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("date")]),s._v(" +"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%F %H:%M:%S'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(' clear start"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##获取所有artifact_count")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("COUNT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -s -k -u "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_user}")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_passwd}")]),s._v('"')]),s._v(" -X GET "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_url}")]),s._v("/api/"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${version}")]),s._v("/search?q="),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${repo}")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("jq"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("artifact_count"),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" -F "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),s._v("}'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" -F "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('","')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v("}'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" -F "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$3")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),s._v("}'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##获取所有repository_name")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("REPS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -s -k -u "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_user}")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_passwd}")]),s._v('"')]),s._v(" -X GET "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_url}")]),s._v("/api/"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${version}")]),s._v("/search?q="),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${repo}")]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("repository_name"),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" -F "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),s._v("}'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 接下来就是根据需求造文件，我这里想要的格式是 artifact_count ,repository_name在同一行一一对应关联起来。")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##touch test_count.txt")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##touch test_server.txt")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("i")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$COUNT")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$i")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" test_count.txt\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("y")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$REPS")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$y")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" test_server.txt\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##合并俩个文件拼接出新的文件，新的文件count_and_server.txt里面存放的就是我们造好的数据。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("paste")]),s._v(" test_count.txt test_server.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" count_and_server.txt\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##删除不需要的文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf test_count.txt\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf test_server.txt\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf server.txt\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##循环读取每一行并判断，这里根据tab切割第一个值是tags_count，第二个值对应repository_name，判断大于5将服务读取到server.txt，这样server.txt里面就是我们所有需要清除的镜像")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("FILENAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("count_and_server.txt \n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FILENAME")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" LINE\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("new_str")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" $LINE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cut")]),s._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v(" -f1"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("new_str1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" $LINE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cut")]),s._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v(" -f2"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$new_str")]),s._v(" -gt "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$new_str1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" server.txt\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## sed -i 's@\\/@%2F@g' server.txt")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("SERVER_NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("server.txt\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$SERVER_NAME")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("read")]),s._v(" LINE\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("              \n\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$LINE")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("PROJECT")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" $LINE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" -F "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$1")]),s._v("}'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("REPOSITORY")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" $LINE "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" -F "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v("}'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 继续造文件，造一个时间和tag名称对应的文件，这里文件是偶数行是created时间。奇数行是tag名称")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("name_date")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -s -k -u "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_user}")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_passwd}")]),s._v('"')]),s._v(" -X GET "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_url}")]),s._v("/api/"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${version}")]),s._v("/projects/"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${PROJECT}")]),s._v("/repositories/"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${REPOSITORY}")]),s._v('/artifacts?page=1&page_size=20"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("jq "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("egrep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("created|name"),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" -v latest"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" -F "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$4")]),s._v("}'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("date")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$name_date")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$date")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" date.txt\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 交换奇偶行")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##awk 'getline i{print i}1' date.txt > tmp.txt")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"++++++++++++++++++++++++++++++++++"')]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##合并两行，将时间和tag名称放到一行一一对应")]),s._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'{if(NR%2!=0)ORS=" ";else ORS="'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v("\"}1'")]),s._v(" date.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" new_date.txt\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 按照时间倒序进行排序")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" -r new_date.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" new1_date.txt\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf new_date.txt\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf date.txt\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" -rf tmp.txt\n        \n        "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("NEW_DEL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("new1_date.txt\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 镜像保留最近的20个")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("del_tag")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" new1_date.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v(" -n +21 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" -F"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$2")]),s._v("}'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n        \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 可以查看到所有满足删除需求的")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$del_tag")]),s._v("   \n        "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"==========================================="')]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##根据tag执行软删除")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token for-or-select variable"}},[s._v("single_del_tag")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$del_tag")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" \n              "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -s -k -u "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_user}")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_passwd}")]),s._v('"')]),s._v(" -X DELETE "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"http://'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${harbor_url}")]),s._v("/api/"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${version}")]),s._v("/projects/"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${PROJECT}")]),s._v("/repositories/"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${REPOSITORY}")]),s._v("/artifacts/"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${single_del_tag}")]),s._v('"')]),s._v("    \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("    \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("done")]),s._v("\n\ndocker-compose -f "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$HARBOR_PATH")]),s._v("/docker-compose.yml stop\ndocker run -it --name gc --rm --volumes-from registry vmware/registry:2.6.2-photon garbage-collect --dry-run /etc/registry/config.yml "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("/dev/null\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("##最后启动harbor")]),s._v("\ndocker-compose -f "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$HARBOR_PATH")]),s._v("/docker-compose.yml start\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("date")]),s._v(" +"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%F %H:%M:%S'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(' clear finish"')]),s._v("\n\n")])])]),a("h2",{attrs:{id:"交换奇偶行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#交换奇偶行"}},[s._v("#")]),s._v(" 交换奇偶行")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("sed -n 'h;$!{n;G};p' file")])])]),s._v(" "),a("ol",[a("li",[a("p",[s._v("[解析]")]),s._v(" "),a("p",[s._v("把第一行内容交换进缓冲区，然后n进入下一行，G把缓冲区内容追加到该行的模式空间内，然后打印。整好就是把第1行，换到第2行后，第3行换到第4行后以此类推。最后一行不操作，直接输出，目的是最后一行如果是奇数行时也会输出。")])])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("awk 'i=NR%2{x=$0;next}{print $0 RS x}END{if(i)print x}' file")])])]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[s._v("[解析]")]),s._v(" "),a("p",[s._v("NR对2取余，那么是偶数行的时候条件为假不会执行后面的赋值，则默认执行后面的打印，如果最后是奇数行,那么i的值是1，则最后END会打印出该行。")])])]),s._v(" "),a("ul",[a("li",[a("code",[s._v("awk 'getline i{print i}1' file")])])]),s._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[s._v("[解析]")]),s._v(" "),a("p",[s._v("Tim大师的思路，真是佩服到不行啊，把getline作为pattern，如果是最后一行是奇数行，没有下读取的话，是不会执行后面的print的，完美解决了奇数行最后一行打印的问题，第一行，读取下一行给i，然后打印i的值（即下一行的内容），然后patter为1执行默认的{print}，这样刚好把两行互换，而且还具备了最后一行是奇数行的判断，佩服。")])])]),s._v(" "),a("h2",{attrs:{id:"安装jq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装jq"}},[s._v("#")]),s._v(" 安装jq")]),s._v(" "),a("p",[s._v("安装EPEL源：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("yum install epel-release")])])]),s._v(" "),a("p",[s._v("安装完EPEL源后，可以查看下jq包是否存在：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("yum list jq")])])]),s._v(" "),a("p",[s._v("安装jq：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("yum install jq")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);