(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{525:function(t,e,s){"use strict";s.r(e);var n=s(19),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#config"}},[t._v("#")]),t._v(" config")]),t._v(" "),s("div",{staticClass:"language-editorconfig extra-class"},[s("pre",{pre:!0,attrs:{class:"language-editorconfig"}},[s("code",[t._v('port 6391\n\ntcp-backlog 511\n\ntimeout 0\n\ntcp-keepalive 300\n\nsupervised no\n\npidfile /var/run/redis_6391.pid\n\nloglevel notice\n\nlogfile ""\n\ndatabases 16\n\nalways-show-logo yes\n\n\nsave 900 1\nsave 300 10\nsave 60 10000\n\nstop-writes-on-bgsave-error yes\n\nrdbcompression yes\n\nrdbchecksum yes\n\n'),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The filename where to dump the DB")]),t._v('\ndbfilename dump.rdb\n\ndir "/data"\n\n'),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("################################# REPLICATION #################################")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Master-Replica replication. Use replicaof to make a Redis instance a copy of")]),t._v("\nmasterauth 123456\n\n")])])]),s("h3",{attrs:{id:"带注解版config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#带注解版config"}},[t._v("#")]),t._v(" 带注解版config")]),t._v(" "),s("div",{staticClass:"language-editorconfig extra-class"},[s("pre",{pre:!0,attrs:{class:"language-editorconfig"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Redis configuration file example.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Note that in order to read the configuration file, Redis must be")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## started with the file path as first argument:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ./redis-server /path/to/redis.conf")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Note on units: when memory size is needed, it is possible to specify")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## it in the usual form of 1k 5GB 4M and so forth:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 1k => 1000 bytes")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 1kb => 1024 bytes")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 1m => 1000000 bytes")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 1mb => 1024*1024 bytes")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 1g => 1000000000 bytes")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 1gb => 1024*1024*1024 bytes")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## units are case insensitive so 1GB 1Gb 1gB are all the same.")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("################################## INCLUDES ###################################")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Include one or more other config files here.  This is useful if you")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## have a standard template that goes to all Redis servers but also need")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## to customize a few per-server settings.  Include files can include")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## other files, so use this wisely.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## Notice option "include" won\'t be rewritten by command "CONFIG REWRITE"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## from admin or Redis Sentinel. Since Redis always uses the last processed")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## line as value of a configuration directive, you'd better put includes")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## at the beginning of this file to avoid overwriting config change at runtime.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If instead you are interested in using includes to override configuration")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## options, it is better to use include as the last line.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## include /path/to/local.conf")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## include /path/to/other.conf")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("################################## MODULES #####################################")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Load modules at startup. If the server is not able to load modules")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## it will abort. It is possible to use multiple loadmodule directives.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## loadmodule /path/to/my_module.so")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## loadmodule /path/to/other_module.so")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("################################## NETWORK #####################################")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## By default, if no "bind" configuration directive is specified, Redis listens')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## for connections from all the network interfaces available on the server.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## It is possible to listen to just one or multiple selected interfaces using")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## the "bind" configuration directive, followed by one or more IP addresses.')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Examples:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## bind 192.168.1.100 10.0.0.1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## bind 127.0.0.1 ::1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## internet, binding to all the interfaces is dangerous and will expose the")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## instance to everybody on the internet. So by default we uncomment the")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## following bind directive, that will force Redis to listen only into")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## the IPv4 loopback interface address (this means Redis will be able to")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## accept connections only from clients running into the same computer it")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## is running).")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## JUST COMMENT THE FOLLOWING LINE.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Protected mode is a layer of security protection, in order to avoid that")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Redis instances left open on the internet are accessed and exploited.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## When protected mode is on and if:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 1) The server is not binding explicitly to a set of addresses using the")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('##    "bind" directive.')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 2) No password is configured.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The server only accepts connections from clients connecting from the")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## sockets.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## By default protected mode is enabled. You should disable it only if")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## you are sure you want clients from other hosts to connect to Redis")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## even if no authentication is configured, nor a specific set of interfaces")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## are explicitly listed using the "bind" directive.')]),t._v("\nprotected-mode no\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Accept connections on the specified port, default is 6379 (IANA ##815344).")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If port 0 is specified Redis will not listen on a TCP socket.")]),t._v("\nport 6391\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TCP listen() backlog.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## In high requests-per-second environments you need an high backlog in order")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## to avoid slow clients connections issues. Note that the Linux kernel")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## will silently truncate it to the value of /proc/sys/net/core/somaxconn so")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## make sure to raise both the value of somaxconn and tcp_max_syn_backlog")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## in order to get the desired effect.")]),t._v("\ntcp-backlog 511\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Unix socket.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify the path for the Unix socket that will be used to listen for")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## incoming connections. There is no default, so Redis will not listen")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## on a unix socket when not specified.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## unixsocket /tmp/redis.sock")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## unixsocketperm 700")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Close the connection after a client is idle for N seconds (0 to disable)")]),t._v("\ntimeout 0\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## TCP keepalive.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## of communication. This is useful for two reasons:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 1) Detect dead peers.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 2) Take the connection alive from the point of view of network")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##    equipment in the middle.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## On Linux, the specified value (in seconds) is the period used to send ACKs.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Note that to close the connection the double of the time is needed.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## On other kernels the period depends on the kernel configuration.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## A reasonable value for this option is 300 seconds, which is the new")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Redis default starting with Redis 3.2.1.")]),t._v("\ntcp-keepalive 300\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("################################# GENERAL #####################################")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## By default Redis does not run as a daemon. Use 'yes' if you need it.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Note that Redis will write a pid file in /var/run/redis.pid when daemonized.")]),t._v("\ndaemonize no\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If you run Redis from upstart or systemd, Redis can interact with your")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## supervision tree. Options:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   supervised no      - no supervision interaction")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   supervised upstart - signal upstart by putting Redis into SIGSTOP mode")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   supervised auto    - detect upstart or systemd method based on")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##                        UPSTART_JOB or NOTIFY_SOCKET environment variables")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## Note: these supervision methods only signal "process is ready."')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##       They do not enable continuous liveness pings back to your supervisor.")]),t._v("\nsupervised no\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If a pid file is specified, Redis writes it where specified at startup")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## and removes it at exit.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## When the server runs non daemonized, no pid file is created if none is")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## specified in the configuration. When the server is daemonized, the pid file")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## is used even if not specified, defaulting to "/var/run/redis.pid".')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Creating a pid file is best effort: if Redis is not able to create it")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## nothing bad happens, the server will start and run normally.")]),t._v("\npidfile /var/run/redis_6391.pid\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify the server verbosity level.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This can be one of:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## debug (a lot of information, useful for development/testing)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## verbose (many rarely useful info, but not a mess like the debug level)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## notice (moderately verbose, what you want in production probably)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## warning (only very important / critical messages are logged)")]),t._v("\nloglevel notice\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify the log file name. Also the empty string can be used to force")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Redis to log on the standard output. Note that if you use standard")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## output for logging but daemonize, logs will be sent to /dev/null")]),t._v('\nlogfile ""\n\n'),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## To enable logging to the system logger, just set 'syslog-enabled' to yes,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## and optionally update the other syslog parameters to suit your needs.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## syslog-enabled no")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify the syslog identity.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## syslog-ident redis")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## syslog-facility local0")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Set the number of databases. The default database is DB 0, you can select")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## a different one on a per-connection basis using SELECT <dbid> where")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## dbid is a number between 0 and 'databases'-1")]),t._v("\ndatabases 16\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## By default Redis shows an ASCII art logo only when started to log to the")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## standard output and if the standard output is a TTY. Basically this means")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## that normally a logo is displayed only in interactive sessions.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## However it is possible to force the pre-4.0 behavior and always show a")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## ASCII art logo in startup logs by setting the following option to yes.")]),t._v("\nalways-show-logo yes\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("################################ SNAPSHOTTING  ################################")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Save the DB on disk:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   save <seconds> <changes>")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   Will save the DB if both the given number of seconds and the given")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   number of write operations against the DB occurred.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   In the example below the behaviour will be to save:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   after 900 sec (15 min) if at least 1 key changed")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   after 300 sec (5 min) if at least 10 keys changed")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   after 60 sec if at least 10000 keys changed")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('##   Note: you can disable saving completely by commenting out all "save" lines.')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   It is also possible to remove all the previously configured save")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   points by adding a save directive with a single empty string argument")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   like in the following example:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('##   save ""')]),t._v("\n\nsave 900 1\nsave 300 10\nsave 60 10000\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## By default Redis will stop accepting writes if RDB snapshots are enabled")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## (at least one save point) and the latest background save failed.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This will make the user aware (in a hard way) that data is not persisting")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## on disk properly, otherwise chances are that no one will notice and some")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## disaster will happen.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If the background saving process will start working again Redis will")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## automatically allow writes again.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## However if you have setup your proper monitoring of the Redis server")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## and persistence, you may want to disable this feature so that Redis will")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## continue to work as usual even if there are problems with disk,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## permissions, and so forth.")]),t._v("\nstop-writes-on-bgsave-error yes\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Compress string objects using LZF when dump .rdb databases?")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## For default that's set to 'yes' as it's almost always a win.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## If you want to save some CPU in the saving child set it to 'no' but")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## the dataset will likely be bigger if you have compressible values or keys.")]),t._v("\nrdbcompression yes\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Since version 5 of RDB a CRC64 checksum is placed at the end of the file.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## This makes the format more resistant to corruption but there is a performance")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## hit to pay (around 10%) when saving and loading RDB files, so you can disable it")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## for maximum performances.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## RDB files created with checksum disabled have a checksum of zero that will")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## tell the loading code to skip the check.")]),t._v("\nrdbchecksum yes\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The filename where to dump the DB")]),t._v("\ndbfilename dump.rdb\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The working directory.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The DB will be written inside this directory, with the filename specified")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## above using the 'dbfilename' configuration directive.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The Append Only File will also be created inside this directory.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Note that you must specify a directory here, not a file name.")]),t._v('\ndir "/data"\n\n'),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("################################# REPLICATION #################################")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Master-Replica replication. Use replicaof to make a Redis instance a copy of")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## another Redis server. A few things to understand ASAP about Redis replication.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   +------------------+      +---------------+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   |      Master      | ---\x3e |    Replica    |")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   | (receive writes) |      |  (exact copy) |")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##   +------------------+      +---------------+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 1) Redis replication is asynchronous, but you can configure a master to")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##    stop accepting writes if it appears to be not connected with at least")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##    a given number of replicas.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 2) Redis replicas are able to perform a partial resynchronization with the")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##    master if the replication link is lost for a relatively small amount of")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##    time. You may want to configure the replication backlog size (see the next")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##    sections of this file) with a sensible value depending on your needs.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 3) Replication is automatic and does not need user intervention. After a")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##    network partition replicas automatically try to reconnect to masters")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##    and resynchronize with them.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## replicaof <masterip> <masterport>")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('## If the master is password protected (using the "requirepass" configuration')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## directive below) it is possible to tell the replica to authenticate before")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## starting the replication synchronization process, otherwise the master will")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## refuse the replica request.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\nmasterauth 123456\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## When a replica loses its connection with the master, or when the replication")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## is still in progress, the replica can act in two different ways:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## and to allocate it in a better place), and at the same time, will release the")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## old copies of the data. This process, repeated incrementally for all the keys")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## will cause the fragmentation to drop back to normal values.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Important things to understand:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 1. This feature is disabled by default, and only works if you compiled Redis")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##    to use the copy of Jemalloc we ship with the source code of Redis.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##    This is the default with Linux builds.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 2. You never need to enable this feature if you don't have fragmentation")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##    issues.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 3. Once you experience fragmentation, you can enable this feature when")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('##    needed with the command "CONFIG SET activedefrag yes".')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## The configuration parameters are able to fine tune the behavior of the")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## defragmentation process. If you are not sure about what they mean it is")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## a good idea to leave the defaults untouched.")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Enabled active defragmentation")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## activedefrag yes")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Minimum amount of fragmentation waste to start active defrag")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## active-defrag-ignore-bytes 100mb")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Minimum percentage of fragmentation to start active defrag")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## active-defrag-threshold-lower 10")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum percentage of fragmentation at which we use maximum effort")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## active-defrag-threshold-upper 100")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Minimal effort for defrag in CPU percentage")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## active-defrag-cycle-min 5")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximal effort for defrag in CPU percentage")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## active-defrag-cycle-max 75")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## Maximum number of set/hash/zset/list fields that will be processed from")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## the main dictionary scan")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## active-defrag-max-scan-fields 1000")]),t._v("\n")])])]),s("h2",{attrs:{id:"redis-sh"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis-sh"}},[t._v("#")]),t._v(" redis.sh")]),t._v(" "),s("div",{staticClass:"language-shell script extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("redis-server  /config/nodes-"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${PORT}")]),t._v(".conf\n")])])]),s("h2",{attrs:{id:"yml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yml"}},[t._v("#")]),t._v(" yml")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("network_mode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" host "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 使用host模式")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("privileged")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 拥有容器内命令执行的权限")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /usr/local/src/docker/redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("cluster/config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/config "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##配置文件目录映射到宿主机")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("entrypoint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("## 设置服务默认的启动程序")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /bin/bash\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" redis.sh\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redis-master2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("working_dir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /config\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" node2\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" PORT=6392\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 6392"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6392")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 16392"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16392")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin_open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("network_mode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" host\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("privileged")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /usr/local/src/docker/redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("cluster/config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/config\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("entrypoint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /bin/bash\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" redis.sh\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redis-master3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.0")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" node3\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("working_dir")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" /config\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("environment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" PORT=6393\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 6393"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6393")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 16393"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16393")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stdin_open")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("network_mode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" host\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("privileged")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /usr/local/src/docker/redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("cluster/config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/config\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("entrypoint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /bin/bash\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" redis.sh\n")])])]),s("h2",{attrs:{id:"集群的创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集群的创建"}},[t._v("#")]),t._v(" 集群的创建")]),t._v(" "),s("ul",[s("li",[t._v("需要在容器里面执行 一条创建集群的语句")]),t._v(" "),s("li",[t._v("关于建立集群的说明 "),s("a",{attrs:{href:"https://www.cnblogs.com/zhoujinyi/p/11606935.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/zhoujinyi/p/11606935.html"),s("OutboundLink")],1)])]),t._v(" "),s("div",{staticClass:"language-shell script extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("redis-cli --cluster add-node "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".163.132:6382 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".163.132:6379 --cluster-slave --cluster-master-id 117457eab5071954faab5e81c3170600d5192270\n\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);